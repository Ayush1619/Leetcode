class Solution {
public:
    
    void backtrack(vector<int>& candidates,int index,vector<vector<int>> &res,
                  vector<int> &ans,int target){
        if(target<0){
            return;
        }
        if(target==0){
            res.push_back(ans);
            return;
        }
        for(int i=index;i<candidates.size();i++){
            if(i > index && candidates[i]==candidates[i-1])
                continue;
            ans.push_back(candidates[i]);
            backtrack(candidates,i+1,res,ans,target-candidates[i]);
            ans.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        
        vector<vector<int>>res;
        vector<int>ans;
        backtrack(candidates,0,res,ans,target);
        return res;
    }
};